import csv
import pandas as pd
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
%matplotlib inline

data = pd.read_csv('./WEATHERDATA.csv', encoding='cp949')

del data['CODE']
del data['LOCATE']
#del data['DATE']

data.to_csv("./RESULT.csv", index = False)
print('Done')
data.head()

new_data = pd.read_csv('./RESULT.csv', encoding='cp949')
new_data = new_data.fillna(0)

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import cross_val_score
from sklearn import metrics

x = new_data[['TEMP', 'WIND', 'RAIN', 'WHUMID', 'HUMID', 'GROTEMP', 'TEMP30']]
y = new_data['PRES']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)

maxFeat = 7
forest = RandomForestRegressor(n_estimators=100, max_features=maxFeat,random_state=777)
forest.fit(x_train, y_train)
y_pred = forest.predict(x_test)

print("Model Accuracy: ",(int)(forest.score(x_test,y_test) * 100), "%")

amountofData = 100
answer = pd.DataFrame((y_test[:amountofData]).reset_index())
del answer["index"]

plt.rcParams["figure.figsize"] = (15,8)
plt.plot(answer, label="answer")
plt.plot(forest.predict(x_test[:amountofData]), label="predict", alpha = 0.5)

a = list(map(int, range(answer.__len__())))
plt.scatter(a,forest.predict(x_test[:amountofData]), alpha = 0.5)
plt.legend()

print("Model Accuracy: ",(int)(forest.score(x_test,y_test) * 100), "%")


df_new = pd.DataFrame(columns = ['TEMP', 'WIND', 'RAIN', 'WHUMID', 'PRES', 'GROTEMP', 'TEMP30'])
df_new.loc[0] = [26.1, 200, 96, 32.4, 998.9, 27.5, 26.0]
df_new.loc[1] = [-5.9, 50, 40, 1.6, 1021.8, -2.4, 3.2]

y_pred = forest.predict(df_new)
#print(y_pred)

#Variable Importance

def plot_feature_importance(model):
    n_features = x.shape[1]
    plt.barh(np.arange(n_features), sorted(model.feature_importances_), align="center")
    plt.yticks(np.arange(n_features), x.columns)
    plt.xlabel("Random Forest Feature Importance")
    plt.ylabel("Feature")
    plt.ylim(-1, n_features)
    
plot_feature_importance(forest)